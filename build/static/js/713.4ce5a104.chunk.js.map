{"version":3,"file":"static/js/713.4ce5a104.chunk.js","mappings":"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","sources":["pages/SignUp.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport loginPageImage from \"../images/loginPageImage.svg\";\nimport { Button, InputAdornment, TextField, makeStyles } from \"@mui/material\";\nimport { AccountCircle, Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport Input from \"@mui/material/Input\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required(\"Email is required\")\n    .email(\"Invalid email address\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .min(8, \"Password must be at least 8 characters\")\n    .matches(/[A-Z]/, \"Password must include at least one capital letter\")\n    .matches(/[0-9]/, \"Password must include at least one number\")\n    .matches(\n      /[!@#$%^&*]/,\n      \"Password must include at least one special character (!@#$%^&*)\"\n    ),\n  confirmPassword: Yup.string()\n    .required(\"Confirm Password is required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\n});\nconst SignUp = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  return (\n    <div className=\"h-screen flex gap-28 items-center justify-center bg-[#F4F7FA]\">\n      <img className=\"max-w-md\" src={loginPageImage} alt=\"\" />\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values) => {\n          // same shape as initial values\n          // login({ email: values.email, password });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <div className=\"flex flex-col bg-white p-10\">\n            {console.log(touched, errors)}\n            <div>\n              {/* <p className=\"font-semibold text-lg\">Welcome to </p> */}\n              <p className=\"text-2xl text-[#6358DD] font-bold mb-10\">\n                Create Account\n              </p>\n            </div>\n            <TextField\n              className=\"w-80\"\n              label=\"Email\"\n              variant=\"outlined\"\n              id=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange(\"email\")}\n            />\n            {touched.email && errors.email && (\n              <p className=\"text-red-500\">{errors.email}</p>\n            )}\n            <div className=\"relative mt-10\">\n              <TextField\n                className=\"w-80\"\n                label=\"Password\"\n                variant=\"outlined\"\n                type={showPassword ? \"text\" : \"password\"}\n                id=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange(\"password\")}\n              />\n              <div\n                className=\"absolute top-[50%] translate-y-[-50%] right-2 cursor-pointer\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <VisibilityOff /> : <Visibility />}\n              </div>\n            </div>\n            {touched.password && errors.password && (\n              <p className=\"text-red-500\">{errors.password}</p>\n            )}\n            <div className=\"relative mt-10\">\n              <TextField\n                className=\"w-80\"\n                label=\"Confirm Password\"\n                variant=\"outlined\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={values.confirmPassword}\n                onChange={handleChange(\"confirmPassword\")}\n              />\n              <div\n                className=\"absolute top-[50%] translate-y-[-50%] right-2 cursor-pointer\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              >\n                {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\n              </div>\n            </div>\n            {touched.confirmPassword && errors.confirmPassword && (\n              <p className=\"text-red-500\">{errors.confirmPassword}</p>\n            )}\n            <div className=\"w-full mt-10\">\n              <Button\n                className=\"w-full\"\n                variant=\"contained\"\n                onClick={handleSubmit}\n              >\n                SIGN UP\n              </Button>\n            </div>\n            <div className=\"flex items-center justify-end mt-10\">\n              <p className=\"text-gray-400 mr-2\">Already have an account?</p>\n              <Link to=\"/\" className=\"text-sm text-[#6358DD] font-semibold\">\n                SIGN IN\n              </Link>\n            </div>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["validationSchema","Yup","shape","email","required","password","min","matches","confirmPassword","oneOf","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showConfirmPassword","setShowConfirmPassword","_jsxs","className","children","_jsx","src","loginPageImage","alt","Formik","initialValues","onSubmit","values","_ref","errors","touched","handleChange","handleSubmit","handleBlur","console","log","TextField","label","variant","id","name","value","onChange","type","onClick","VisibilityOff","Visibility","Button","Link","to"],"sourceRoot":""}